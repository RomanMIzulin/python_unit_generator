"""This file is generated by test_case_generator"""
from typing import NamedTuple, Callable

from unit_gen.unittest_case_generator import generate_test_case


def kek(foo: int, bar: str) -> str:
    return str(foo) + bar


def test_generate_test_case():
    class Args(NamedTuple):
        func: Callable

    class Test(NamedTuple):
        name: str
        args: Args
        want: str

    cases: tuple[Test, ...] = (
        Test(
            "Test on itself",
            Args(generate_test_case),
            """\n
def test_generate_test_case():
    class Args(NamedTuple):
        func: Callable

    class Test(NamedTuple):
        name: str
        args: Args
        want: str

    cases: tuple[Test] = (
        # TODO: add cases here
    )
    print(f"running test cases for generate_test_case function:")
    for case in cases:
        if (v := generate_test_case(*case.args)) != case.want:
            print(f"{case.name} generate_test_case got {v}, wanted {case.want}")
         """,
        ),
        Test(
            "Test on kek func",
            Args(kek),
            """def test_kek():
    class Args(NamedTuple):
        foo: int
        bar: str


    class Test(NamedTuple):
        name: str
        args: Args
        want: str

    cases: tuple[Test] = (
        # TODO: add cases here
    )

    print(f"running test cases for kek function:\\n")
    for case in cases:
        if (v := func(*case.args)) != case.want:
            print(f"{case.name} kek got {v} wanted {case.want}")
    print("Test complited")
             """,
        ),
    )
    print(f"running test cases for generate_test_case function:\n")
    for case in cases:
        if (v := generate_test_case(*case.args)) != case.want:
            print(f"{case.name} generate_test_case got {v} wanted {case.want}\n")
    print("Test complited")


if __name__ == "__main__":
    test_generate_test_case()
